use dp method

  1. use sliding array to optimize the dp;
  2. use a single int variable, instead of creating a static/dynamic array, could save space significantly;
  3. note boudary conditions;


  class Solution {
  public:
      int maxSubArray(vector<int>& nums) {
          int sum = nums[0];
          int ans = nums[0];
          for (int i = 1; i < nums.size(); ++i) {
              sum = std::max(nums[i], sum + nums[i]);
              ans = std::max(ans, sum);
          }
          return ans;
      }
  };
