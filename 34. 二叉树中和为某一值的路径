use dfs algorithm & recursion method


  /**
   * Definition for a binary tree node.
   */
  struct TreeNode {
      int val;
      TreeNode *left;
      TreeNode *right;
      TreeNode() : val(0), left(nullptr), right(nullptr) {}
      TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
      TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
  };

  class Solution {
  public:
      vector<vector<int>> pathSum(TreeNode* root, int target) {
          dfs(root, target);
          return ans;
      }

  private:
      void dfs(TreeNode* root, int target) {
          if (!root) {
              return;
          }
          path.emplace_back(root->val);
          target -= root->val;
          if (root->left == nullptr && root->right == nullptr && target == 0) {
              ans.emplace_back(path);
          }
          dfs(root->left, target);
          dfs(root->right, target);
          path.pop_back();
      }
  private:
      std::vector<vector<int>> ans;
      std::vector<int> path;
  };
