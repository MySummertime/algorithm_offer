As we know that (a + b) == (a & b) + ((a ^ b) << 1), so we could complete the whole process by bit operating.

  
  1. the equation is so solid that we could use recursion method;
  
  /**
   * @param {number} a
   * @param {number} b
   * @return {number}
  **/
  var add = ((a, b) => {
      return b === 0 ? a : add(a ^ b, (a & b) << 1);
  });
  
  
  2. we could complete the whole process by iteration method as well, no recursing;
  
  /**
   * @param {number} a
   * @param {number} b
   * @return {number}
  **/
  var add = function(a, b) {
      while (b) {
          let tmp = (a & b) << 1;
          b ^= a;
          a = tmp;
      }
      return a;
  };
