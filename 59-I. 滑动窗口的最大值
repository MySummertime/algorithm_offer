1. use a priority_queue to represent the sliding window;


  class Solution {
  public:
      vector<int> maxSlidingWindow(vector<int>& nums, int k) {
          if (nums.empty() || k > nums.size() || k <= 0) {
              return {};
          }
          priority_queue<pair<int, int>> que;
          for (int i = 0; i < k; ++i) {
              que.emplace(nums[i], i);
          }
          vector<int> ans;
          ans = {que.top().first};
          for (int i = k; i < nums.size(); ++i) {
              que.emplace(nums[i], i);
              while (que.top().second <= i - k) {
                  que.pop();
              }
              ans.emplace_back(que.top().first);
          }
          return ans;
      }
  };
