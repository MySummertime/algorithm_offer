use recursing method


  1. we replace the int input of n with long input of n when we pass the actual value of n (might be rejected in some cases)
  
  class Solution {
  public:
      double myPow(double x, long n) {
          if (x == 0 || x == 1.0) {
              return x;
          }
          if (!n) {
              return 1;
          }
          if (n < 0) {
              return (1 / x) * myPow(1 / x, -n - 1);
          }
          return (n & 1) ? x * myPow(x * x, n >> 1) : myPow(x * x, n >> 1);
      }
  };
  
  
  2. we transfer the int input of n into unsigned int input of n within our main function (this way is way better than the one above)

  class Solution {
  public:
      double myPow(double x, int n) {
          if (x == 0.0 || x == 1.0) {
              return x;
          }
          abs = (unsigned int) n;
          if (n < 0) {
              abs = -abs;
          }
          ans = function(x, abs);
          if (n < 0) {
              ans = 1.0 / ans;
          }
          return ans;
      }

  private:
      unsigned int abs;
      double ans = 0;

      double function(double x, unsigned int abs) {
          if (!abs) {
              return 1;
          }
          else if (abs == 1) {
              return x;
          }
          double ans = function(x, abs >> 1);
          ans *= ans;
          if (abs & 1) {
              ans *= x;
          }
          return ans;
      }
  };
