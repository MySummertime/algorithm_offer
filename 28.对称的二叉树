using DFS recursion to traverse both tree

  1. there's 3 ways to determine whether 2 tree is definitely same
    1. a == nullptr && b == nullptr, so that a == b;
    2. a == nullptr && b != nullptr, so that a != b, or
       a != nullptr && b == nullptr, so that a != b;
    3. a->val != b->val, so that a != b;
  2. DFS recursion
    1. when we reach one tree's leaf, we reach another tree's leaf at the same time, we should determine if they are the same depending the 3 ways above;
    2. if 2 trees are the same, we could find out a->left == b->left, and a->right == b->left at the same time, definitely;
    
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        return func(root, root);
    }
    
private:
    bool func(TreeNode* a, TreeNode* b) {
        if (a == nullptr && b == nullptr) {
            return 1;
        }
        if (a == nullptr || b == nullptr) {
            return 0;
        }
        if (a->val != b->val) {
            return 0;
        }
        return func(a->left, b->right) && func(a->right, b->left);
        
    }
};
