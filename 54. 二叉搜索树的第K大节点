dfs + reverse of mid-order traversal

  1. characteristics of binary search tree: 
    root->left->val << root->val << root->right->val;
  2. result of mid-order traversal would be like:
    a strictly increasing result list of nodes, then we could gain the kth largest node from the bottom;
  3. result of reverse of mid-order traversal sould be like:
    a strictly decreasing result list of nodes, then we could gain the kth largest node from the top;
  

  /**
   * Definition for a binary tree node.
   * struct TreeNode {
   *     int val;
   *     TreeNode *left;
   *     TreeNode *right;
   *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
   * };
   */

  class Solution {
  public:
      int kthLargest(TreeNode* root, int k) {
          dfs(root, k);
          return ans;
      }

      void dfs(TreeNode* root, int& k) {
          if (root == nullptr) {
              return;
          }
          dfs(root->right, k);
          k--;
          if (k == 0) {
              ans = root->val;
          }
          dfs(root->left, k);
      }

  public:
      int ans = 0;

  };
