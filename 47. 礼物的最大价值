use dp method


  1. use a one-dimension sliding array, instead of creating a double-dimension array which has the same size of the original matrix, to optimize the space cost;
  2. traverse the original matrix from left-up to right-down;
  
  class Solution {
  public:
      int maxValue(vector<vector<int>>& grid) {
          if (!grid.size() || (!grid[0].size())) {
              return 0;
          }
          int h = grid.size();
          int w = grid[0].size();
          std::vector<int> vec(w + 1);
          for (int i = 0; i < h; ++i) {
              for (int j = 0; j < w; ++j) {
                  vec[j + 1] = grid[i][j] + std::max(vec[j], vec[j + 1]);
              }
          }
          return vec[grid[0].size()];
      }
  };
