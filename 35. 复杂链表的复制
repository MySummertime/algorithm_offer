use unordered_map & dfs method

  1. use unordered_map in hash container to simulate the list;
  2. use dfs method to generate the same list;


  // Definition for a Node.
  class Node {
  public:
      int val;
      Node* next;
      Node* random;

      Node(int _val) {
          val = _val;
          next = NULL;
          random = NULL;
      }
  };

  class Solution {
  public:
      Node* copyRandomList(Node* head) {
          if (head == nullptr) {
              return nullptr;
          }
          if (!m.count(head)) {   //m[head] could be found
              Node* newHead = new Node(head->val);
              m[head] = newHead;
              newHead->next = copyRandomList(head->next);
              newHead->random = copyRandomList(head->random);
          }
          return m[head];
      }

  private:
      unordered_map<Node*, Node*> m;
  };
