concate & disassemble to make sure the O(1) space


  // Definition for a Node.
  class Node {
  public:
      int val;
      Node* next;
      Node* random;

      Node(int _val) {
          val = _val;
          next = NULL;
          random = NULL;
      }
  };
  class Solution {
  public:
      Node* copyRandomList(Node* head) {
          if (!head) {
              return nullptr;
          }
          Node* cur = head;
          //concatenat the old & the new while generating the new
          while (cur) {
              Node* tmp = new Node(cur->val);
              tmp->next = cur->next;
              cur->next = tmp;
              cur = cur->next->next;
          }
          cur = head;
          //generate random_pointers of the new
          while (cur) {
              Node* tmp = cur->next;
              tmp->random = (cur->random != nullptr ? cur->random->next : nullptr);
              cur = cur->next->next;
          }
          cur = head;
          Node* dum = head->next;
          //disassemble the old & the new by update next_pointers
          while (cur) {
              Node* tmp = cur->next;
              cur->next = cur->next->next;
              tmp->next = (tmp->next != nullptr ? tmp->next->next : nullptr);
              cur = cur->next;
          }
          return dum;
      }
  };
