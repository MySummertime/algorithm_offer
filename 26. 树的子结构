traversing the original tree by recursion method



  /**
   * Definition for a binary tree node.
  */
  struct TreeNode {
      int val;
      TreeNode *left;
      TreeNode *right;
      TreeNode(int x) : val(x), left(NULL), right(NULL) {}
  };

  class Solution {
  public:
      bool isSubStructure(TreeNode* A, TreeNode* B) {
          if (A == nullptr || B == nullptr) {
              return false;
          }
          if (isSame(A, B)) {
              return true;
          }
          return isSubStructure(A->left, B) || isSubStructure(A->right, B);
      }

  private:
      bool isSame(TreeNode* t1, TreeNode* t2) {
          if (t2 == nullptr) {
              return true;
          }
          if (t1 == nullptr) {
              return false;
          }
          if (t1->val != t2->val) {
              return false;
          }
          return isSame(t1->left, t2->left) && isSame(t1->right, t2->right);
      }
  };
