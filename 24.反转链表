reverse list by recursive algorithm

  1. end condition: head->next == nullptr;
  2. when head->next == nullptr, starting backtracking;
  3. for every layer of recursive, make head->next->next == head itself, head->next = nullptr, so that we finish the partial reverse of head and head->next;
  4. when we finish recursive action, return the current head(the original tail node);


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        if(head == nullptr || head->next == nullptr){
            return head;
        }
        ListNode* node = reverseList(head->next);
        head->next->next = head;
        head->next = nullptr;
        return node;
    }
};
