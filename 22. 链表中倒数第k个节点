using double pointers like C++ version

  1. initialize both pointers as head, make sure both of them starts traversing from the head of the list;
  2. when the former pointer reach the kth node, the latter could start traverse with it, so the whole steps that the latter makes is (n - k);


/**
 * Definition for singly-linked list.
 * class ListNode {
 *     val: number
 *     next: ListNode | null
 *     constructor(val?: number, next?: ListNode | null) {
 *         this.val = (val===undefined ? 0 : val)
 *         this.next = (next===undefined ? null : next)
 *     }
 * }
 */

 function getKthFromEnd(head: ListNode | null, k: number): ListNode | null {
    if (!head || k <= 0) {
        return null;
    }
    let former: ListNode = head;
    let latter: ListNode = head;
    while (k--) {
        former = former.next;
    }
    while (former) {
        former = former.next;
        latter = latter.next;
    }

    return latter;
};
